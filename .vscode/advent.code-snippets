{
	// Place your advent-of-code-2020 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	//   "console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New day": {
		"scope": "rust",
		"prefix": "newDay",
		"body": [
			"fn puzzle1(input: Vec<String>) -> usize {",
			"  0",
			"}",
			"fn puzzle2(input: Vec<String>) -> usize {",
			"  0",
			"}",
			"",
			"#[cfg(test)]",
			"mod tests {",
			"  use super::*;",
			"",
			"  #[test]",
			"  fn first_puzzle_test_input() {",
			"    assert_eq!(",
			"      puzzle1(TEST_INPUT.iter().map(|x| x.to_string()).collect()),",
			"      0",
			"    );",
			"  }",
			"",
			"  #[test]",
			"  fn first_puzzle_real_input() {",
			"    assert_eq!(",
			"      puzzle1(crate::util::read_file(\"./data/dayN.txt\").unwrap()),",
			"      0",
			"    );",
			"  }",
			"",
			"  #[test]",
			"  fn second_puzzle_test_input() {",
			"    assert_eq!(",
			"      puzzle2(TEST_INPUT.iter().map(|x| x.to_string()).collect()),",
			"      0",
			"    );",
			"  }",
			"",
			"  #[test]",
			"  fn second_puzzle_real_input() {",
			"    assert_eq!(",
			"      puzzle2(crate::util::read_file(\"./data/dayN.txt\").unwrap()),",
			"      0",
			"    );",
			"  }",
			"",
			"  const TEST_INPUT: &'static [&'static str] = &[];",
			"}  "
		]
	}
}
